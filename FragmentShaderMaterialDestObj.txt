#version 330 core
out vec4 FragColor;

in vec3 Normal;
in vec3 FragPos;

struct Material {

  vec3 ambient;
  vec3 diffuse;
  vec3 specular;

  float shininess;
};

struct Light {
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;

  vec3 position;
};

uniform Material material;
uniform Light light;

uniform vec3 viewPos;

void main()
{
  // ambient
  vec3 ambient = light.ambient * material.ambient;

  // diffuse 
  vec3 norm = normalize(Normal);
  vec3 lightDir = normalize(light.position - FragPos);
  float diff = max(dot(norm, lightDir), 0.0);
  vec3 diffuse = diff * light.diffuse * material.diffuse;

  // specular

  vec3 viewDir = normalize(FragPos - viewPos);
  vec3 reflectDir = reflect(-lightDir, viewDir);
  float spec = pow(max(dot(viewDir,reflectDir), 0.0), 32); // 32 shininesss....
  vec3 specular = spec * light.specular * material.specular;


  vec3 result = (ambient + diffuse+ specular);
  FragColor = vec4(result, 1.0);
}

